Word count: 478
**PROMPT FOR ETHICAL HACKING AND SQL INJECTION RECONNAISSANCE**

AS AN EXPERT IN ETHICAL HACKING AND BUG BOUNTY HUNTING, I WILL GUIDE YOU THROUGH THE PROCESS OF PERFORMING RECONNAISSANCE ON A SPECIFIC TARGET TO IDENTIFY POTENTIAL SQL INJECTION VULNERABILITIES. THIS PROMPT WILL PROVIDE YOU WITH A DETAILED METHODOLOGY, EXAMPLES OF EXPLOITS, AND STEP-BY-STEP INSTRUCTIONS ON HOW TO EXPLOIT THESE VULNERABILITIES RESPONSIBLY AND ETHICALLY, ENSURING COMPLIANCE WITH ALL LEGAL AND ETHICAL STANDARDS.

### OBJECTIVE:
TO IDENTIFY AND EXPLOIT SQL INJECTION VULNERABILITIES ON A TARGET WEB APPLICATION, WHILE DOCUMENTING THE PROCESS FOR RESPONSIBLE DISCLOSURE TO THE APPLICATION OWNER.

### STEP 1: INFORMATION GATHERING
1. **TARGET IDENTIFICATION**: DEFINE YOUR TARGET URL OR WEB APPLICATION. FOR EXAMPLE, CONSIDER A LOGIN PAGE: `HTTP://EXAMPLE.COM/LOGIN`.
  
2. **ANALYZE INPUT FIELDS**: EXAMINE THE INPUT FIELDS AVAILABLE ON THE TARGET PAGE. COMMON INPUT POINTS INCLUDE:
   - LOGIN FORMS (USERNAME/PASSWORD)
   - SEARCH BARS
   - URL PARAMETERS (E.G., `HTTP://EXAMPLE.COM/PRODUCTS?ID=1`)

3. **EXPLORE TECHNOLOGY STACK**: USE TOOLS LIKE BUILTWITH OR WAPPALYZER TO IDENTIFY THE TECHNOLOGY STACK, INCLUDING THE DATABASE TYPE (E.G., MYSQL, POSTGRESQL).

### STEP 2: TESTING FOR VULNERABILITIES
1. **CRAFTING TEST PAYLOADS**: USE COMMON SQL INJECTION TEST PAYLOADS TO SEE IF THE APPLICATION IS VULNERABLE. START WITH SIMPLE INPUTS SUCH AS:
   - `' OR '1'='1`
   - `ADMIN' --`
   - `1' OR '1'='1' --`

2. **AUTOMATED SCANNING**: UTILIZE TOOLS LIKE SQLMAP OR BURP SUITE TO AUTOMATE THE DETECTION OF SQL INJECTION VULNERABILITIES:
   - **SQLMAP EXAMPLE COMMAND**: 
     ```BASH
     SQLMAP -U "HTTP://EXAMPLE.COM/LOGIN" --DATA="USERNAME=ADMIN&PASSWORD=12345" --DBMS=MYSQL --LEVEL=3 --RISK=3
     ```

### STEP 3: EXPLOITATION
1. **EXTRACTING DATA**: IF A VULNERABILITY IS CONFIRMED, YOU CAN EXTRACT DATA USING SQL INJECTION TECHNIQUES. FOR INSTANCE, TO RETRIEVE USER DATA:
   - **EXAMPLE PAYLOAD**:
     ```SQL
     ' UNION SELECT USERNAME, PASSWORD FROM USERS -- 
     ```
   - THIS PAYLOAD ATTEMPTS TO APPEND A NEW SQL QUERY THAT RETRIEVES USERNAMES AND PASSWORDS FROM THE `USERS` TABLE.

2. **BLIND SQL INJECTION**: IF THE APPLICATION DOES NOT SHOW ERRORS, USE BLIND SQL INJECTION TECHNIQUES:
   - **BOOLEAN-BASED**: USE CONDITIONS THAT RETURN TRUE/FALSE TO INFER DATA:
     ```SQL
     HTTP://EXAMPLE.COM/PRODUCTS?ID=1 AND 1=1
     HTTP://EXAMPLE.COM/PRODUCTS?ID=1 AND 1=2
     ```

3. **TIME-BASED BLIND SQL INJECTION**: IF THE APPLICATION IS IMMUNE TO ERROR MESSAGES, YOU CAN USE TIME DELAYS:
   ```SQL
   HTTP://EXAMPLE.COM/PRODUCTS?ID=1; IF (1=1) WAITFOR DELAY '00:00:10' -- 
   ```

### STEP 4: DOCUMENTATION AND REPORTING
1. **DOCUMENT FINDINGS**: KEEP DETAILED NOTES OF THE VULNERABILITIES FOUND, PAYLOADS USED, AND ANY DATA ACCESSED.
  
2. **RESPONSIBLE DISCLOSURE**: PREPARE A REPORT TO DISCLOSE YOUR FINDINGS TO THE TARGET'S SECURITY TEAM. INCLUDE:
   - A SUMMARY OF VULNERABILITIES
   - STEPS TO REPRODUCE THE ISSUE
   - SUGGESTED FIXES OR MITIGATION STRATEGIES

3. **ETHICAL CONSIDERATIONS**: ENSURE THAT YOUR ACTIONS COMPLY WITH THE ETHICAL GUIDELINES OF BUG BOUNTY PROGRAMS, AND AVOID ANY ACTIONS THAT COULD BE DEEMED MALICIOUS OR HARMFUL.

### CONCLUSION
BY FOLLOWING THIS PROMPT, YOU WILL BE ABLE TO SYSTEMATICALLY IDENTIFY AND EXPLOIT SQL INJECTION VULNERABILITIES WHILE ADHERING TO ETHICAL HACKING STANDARDS. REMEMBER TO ALWAYS SEEK PERMISSION BEFORE TESTING ANY APPLICATION AND DISCLOSE VULNERABILITIES RESPONSIBLY.